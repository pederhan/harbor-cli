{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Harbor CLI is a command line tool for Harbor. It is used to manage Harbor projects, repositories, artifacts, users, and more.</p> <p>Harbor CLI is powered by harborapi and attempts to follow the Harbor API specification as closely as possible. This means you should be able to expect the same behavior and results from the CLI as you would from the API in most cases.</p>"},{"location":"#installation","title":"Installation","text":"<p>The name <code>harbor-cli</code> is in the process of being acquired from its current owner on PyPI.</p> <p>In the meantime, you can install the application from GitHub:</p> <pre><code>pip install git+https://github.com/pederhan/harbor-cli\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>Harbor CLI is configured via a TOML configuration file which must be created prior to running for the first time. This configuration file can be created by running the command:</p> <pre><code>harbor init\n</code></pre> <p>This will create a config file at <code>~/.config/harbor-cli/config.toml</code> (depends on your platform), and then run the interactive configuration wizard. Specify the <code>--no-wizard</code> flag to skip the configuration wizard.</p> <p>Important</p> <p>The configuration file is required to run the application. Running without a configuration file will call <code>harbor init</code> and create a configuration file at the default location.</p> <p>To create a configuration file at a specific location, use the <code>--path</code> option:</p> <pre><code>harbor init --path /path/to/config.toml\n</code></pre>"},{"location":"configuration/#sample-configuration-file","title":"Sample configuration file","text":"<pre><code>[harbor]\nurl = \"\"\nusername = \"\"\nsecret = \"\"\ncredentials_base64 = \"\"\ncredentials_file = \"\"\n[logging]\nenabled = true\nstructlog = false\nlevel = \"INFO\"\n[output]\nformat = \"table\"\n[output.table]\ndescription = false\nmax_depth = -1\ncompact = false\n[output.JSON]\nindent = 2\nsort_keys = true\n</code></pre> <p>NOTE: The name of the <code>output.JSON</code> table is case-sensitive. The reason this name is upper-case is due to a conflict with the built-in Pydantic <code>json</code> method. This will hopefully be fixed in a future release.</p>"},{"location":"configuration/#print-sample-configuration-file-to-stdout","title":"Print sample configuration file to stdout","text":"<p>To print a sample configuration file, use the <code>sample-config</code> command:</p> <pre><code>harbor sample-config\n</code></pre> <p>This can then be combined with the <code>&gt;</code> operator to redirect the output to a file:</p> <pre><code>harbor sample-config &gt; /path/to/config.toml\n</code></pre> <p>The custom file can then be specified when running the application with the <code>--config</code> option:</p> <pre><code>harbor --config /path/to/config.toml &lt;command&gt;\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p><code>harbor-cli</code> is an open source project, and contributions are welcome. This document outlines the development process.</p>"},{"location":"contributing/#development-environment","title":"Development environment","text":"<p>Start by cloning the repository.</p> <pre><code>git clone git@github.com:pederhan/harbor-cli.git\n</code></pre> <p>Use Hatch to set up the required development environments.</p> <pre><code>hatch env create\n</code></pre> <p>See the Hatch docs for more information on environments.</p>"},{"location":"contributing/#pre-commit-hooks","title":"Pre-commit hooks","text":"<p>The code is linted and formatted using a pre-commmit configuration consisting of tools such as Black, Ruff, reorder_python_imports and mypy.</p> <p>Install pre-commit:</p> <pre><code>pip install pre-commit\n</code></pre> <p>Install the pre-commit hooks:</p> <pre><code>pre-commit install\n</code></pre> <p>Run the pre-commit hooks:</p> <pre><code>pre-commit run --all-files\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Hatch supports testing against multiple Python versions, similar to Tox and Nox.</p> <p>To run the test suite for the current environment:</p> <pre><code>hatch run test\n</code></pre> <p>Run the test suite for all supported Python versions:</p> <pre><code>hatch run test:test\n</code></pre> <p>Tests are run in CI, but it's a good idea to run them locally before pushing changes.</p>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>The documentation is built using MkDocs. To serve the documentation locally:</p> <pre><code>hatch run docs:serve\n</code></pre> <p>To build the documentation:</p> <pre><code>hatch run docs:build\n</code></pre>"},{"location":"contributing/#changelog","title":"Changelog","text":"<p>TBD</p>"},{"location":"contributing/#pull-requests","title":"Pull requests","text":"<p>When submitting a pull request, please make sure to run the pre-commit hooks and tests locally before pushing. This will ensure a smoother review process.</p>"},{"location":"contributing/#releasing","title":"Releasing","text":"<p>On versioning</p> <p>In general, managing releases and versioning should only be handled by the project maintainer(s), but it is documented here for completeness.</p> <p>Releases are handled by a GitHub actions workflow found here. Whenever a new tag whose name starts <code>harbor-cli-v</code> is pushed to the repository on the <code>main</code> branch, the workflow will build and publish a new release to PyPI.</p> <pre><code>$ python scripts/bump_version.py --help\n\n Usage: bump_version.py [OPTIONS] [major|minor|patch|x.y.z],[release|a|a\n                        lpha|b|beta|c|rc|pre|preview|r|rev|post|dev]\n\n Bump the version of the project and create a new git tag.\n Examples:\n $ python bump_version.py minor\n $ python bump_version.py major,rc\n $ python bump_version.py 1.2.3 # generally don't use this\n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *    version      [major|minor|patch|x.y.z  Version bump to perform   \u2502\n\u2502                   ],[release|a|alpha|b|bet  or new version to set.    \u2502\n\u2502                   a|c|rc|pre|preview|r|rev  [default: None]           \u2502\n\u2502                   |post|dev]                [required]                \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help          Show this message and exit.                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>To assist in bumping versions and tagging correctly, there is a script in <code>scripts/bump_version.py</code> that shares the same interface as <code>hatch version</code>.</p> <p>The tool will automatically update the version in <code>harbor_cli/__about__.py</code>, and create a new git tag with the bumped version number (<code>harbor-cli-vx.y.z</code>).</p> <p>Pushing the new tag to the remote repository will trigger a new release.</p> <pre><code>git push origin --tags\n</code></pre>"},{"location":"contributing/#bumping","title":"Bumping","text":""},{"location":"contributing/#major-version","title":"Major version","text":"<p>Major releases are used to indicate breaking changes. Breaking changes are changes that break backwards compatibility, such as removing or renaming a command or option, changing the configuration file format, or changing the behavior of an existing command.</p> <pre><code>python scripts/bump_version.py major\n</code></pre>"},{"location":"contributing/#minor-version","title":"Minor version","text":"<p>Minor releases are used to indicate new features that maintain backwards compatibility. New commands and new options are considered new features.</p> <pre><code>python scripts/bump_version.py minor\n</code></pre>"},{"location":"contributing/#patch-version","title":"Patch version","text":"<p>Patch releases are used to indicate bug fixes, refactoring, and other minor non-feature changes that maintain backwards compatibility.</p> <pre><code>python scripts/bump_version.py patch\n</code></pre>"},{"location":"contributing/#status-suffixes","title":"Status suffixes","text":""},{"location":"contributing/#bump-and-pre-release","title":"Bump and pre-release","text":"<p>Sometimes we want to publish a pre-release version to allow users to test the new version before it is officially released.</p> <pre><code>python scripts/bump_version.py major,pre\n</code></pre>"},{"location":"contributing/#release-candidate","title":"Release candidate","text":"<p>Graduating to release candidate is not necessary, but can sometimes be useful to indicate that the release is feature-complete and ready for testing, but not yet ready for general use due to possible minor bugs or missing/incomplete documentation.</p> <pre><code>python scripts/bump_version.py major,rc\n</code></pre>"},{"location":"contributing/#release","title":"Release","text":"<p>Going from a pre-release or a release candidate to a release is done by removing the status suffix:</p> <pre><code>python scripts/bump_version.py release\n</code></pre>"},{"location":"reference/output/schema/","title":"Schema","text":"<p>Somewhat experimental schema for (de)serializing data (JSON, YAML, etc.)</p> <p>Not to be confused with JSON Schema (https://json-schema.org/specification.html)</p> <p>The aim is to be able to serialize a Pydantic model to JSON, YAML, etc. and include metadata about the model in the serialized data. This metadata can then be used to deserialize the data back into the correct Pydantic model.</p> <p>The benefit of this is that we can more easily print the data as tables using the harborapi.models.BaseModel's as_table() method, and we can also use the Pydantic models' custom validation, methods and properties.</p> <p>The difference between this and the built-in schema funtionality of Pydantic is that we are not interested in actually exporting the full schema of all the models, but rather just enough information to dynamically load the correct model from the correct location when deserializing the data.</p>"},{"location":"reference/output/schema/#harbor_cli.output.schema.Schema","title":"<code>Schema</code>","text":"<p>         Bases: <code>BaseModel</code>, <code>Generic[T]</code></p> <p>A schema for (de)serializing data (JSON, YAML, etc.)</p> Source code in <code>harbor_cli/output/schema.py</code> <pre><code>class Schema(BaseModel, Generic[T]):\n\"\"\"A schema for (de)serializing data (JSON, YAML, etc.)\"\"\"\nversion: str = \"1.0.0\"  # TODO: use harborapi.models.SemVer?\ntype: Optional[str] = None  # should only be None if empty list\nmodule: Optional[str] = None\ndata: Union[T, List[T]]\nclass Config:\nextra = \"allow\"\n@classmethod\ndef from_data(cls, data: T) -&gt; Schema[T]:\n\"\"\"Create a schema from data\"\"\"\nreturn cls(data=data)\n@classmethod\ndef from_file(cls, path: Path) -&gt; Schema:\n\"\"\"Load a schema from a file\"\"\"\nif path.suffix == \".json\":\nobj = cls.parse_file(path)\nelse:\nraise ValueError(f\"Unsupported file type {path.suffix}\")\nreturn obj\n@root_validator\ndef set_type(cls, values: Dict[str, Any]) -&gt; Dict[str, Any]:\n# If schema has type and module, we are loading from a file\nif values.get(\"type\") is not None and values.get(\"module\") is not None:\ncls._parse_data(values)\nreturn values\ndata = values.get(\"data\")\nif isinstance(data, Sequence):\nif not data:\nreturn values\ndata = data[0]\ntyp = type(data)\nif typ is None:\nreturn values  # no validation to perform\nmodule = inspect.getmodule(typ)\nif not module:\nraise ValueError(f\"Unknown data type: {typ}\")\n# Determine the correct type name\nfor n in [typ.__qualname__, typ.__name__]:\ntry:\ntyp = getattr(module, n)  # check if we can getattr the type\nvalues[\"type\"] = n\nbreak\nexcept AttributeError:\npass\nelse:\nraise ValueError(f\"Unknown data type: {typ}\")\nvalues[\"module\"] = module.__name__\ncls._parse_data(values)\nreturn values\n@classmethod\ndef _parse_data(cls, values: Dict[str, Any]) -&gt; None:\n\"\"\"Parses the value of data into the correct type if possible.\"\"\"\nmodule = importlib.import_module(values[\"module\"])\ntyp = getattr(module, values[\"type\"])\ntry:\nif issubclass(typ, BaseModel):\nvalues[\"data\"] = typ.parse_obj(values[\"data\"])\nexcept TypeError:\npass\n</code></pre>"},{"location":"reference/output/schema/#harbor_cli.output.schema.Schema.from_data","title":"<code>from_data(data: T) -&gt; Schema[T]</code>  <code>classmethod</code>","text":"<p>Create a schema from data</p> Source code in <code>harbor_cli/output/schema.py</code> <pre><code>@classmethod\ndef from_data(cls, data: T) -&gt; Schema[T]:\n\"\"\"Create a schema from data\"\"\"\nreturn cls(data=data)\n</code></pre>"},{"location":"reference/output/schema/#harbor_cli.output.schema.Schema.from_file","title":"<code>from_file(path: Path) -&gt; Schema</code>  <code>classmethod</code>","text":"<p>Load a schema from a file</p> Source code in <code>harbor_cli/output/schema.py</code> <pre><code>@classmethod\ndef from_file(cls, path: Path) -&gt; Schema:\n\"\"\"Load a schema from a file\"\"\"\nif path.suffix == \".json\":\nobj = cls.parse_file(path)\nelse:\nraise ValueError(f\"Unsupported file type {path.suffix}\")\nreturn obj\n</code></pre>"},{"location":"usage/basic-usage/","title":"Basic Usage","text":"<p>The application consists of several top-level commands pertaining to specific Harbor resources, such as <code>project</code>, <code>repository</code>, <code>artifact</code>, etc. Each of these commands have subcommands that can be used to perform actions on the resource, such as <code>create</code>, <code>delete</code>, <code>list</code>, etc.</p>"},{"location":"usage/basic-usage/#global-options","title":"Global options","text":"<p>Most of the global options listed in Help output are overrides for configuration file settings. These options can be used to override configuration options. See Options for more information about each of the options. For persistent configuration of these options, see Configuration.</p> <p>Global options must be specified before the command to run, e.g.:</p> <pre><code>harbor --format json project list\n</code></pre>"},{"location":"usage/basic-usage/#help-output","title":"Help output","text":"<pre><code>$ harbor --help\n\n Usage: harbor [OPTIONS] COMMAND [ARGS]...                                      \n\n Harbor CLI                                                                     \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --config          -c                      PATH             Path to config    \u2502\n\u2502                                                            file.             \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --harbor-url      -u                      TEXT             Harbor URL.       \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --harbor-userna\u2026  -U                      TEXT             Harbor username.  \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --harbor-secret   -S                      TEXT             Harbor secret.    \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --credentials     -C                      TEXT             Harbor basic      \u2502\n\u2502                                                            access            \u2502\n\u2502                                                            credentials       \u2502\n\u2502                                                            (base64).         \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --credentials-f\u2026  -F                      PATH             Harbor basic      \u2502\n\u2502                                                            access            \u2502\n\u2502                                                            credentials file. \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --table-descrip\u2026      --table-no-desc\u2026                     Include field     \u2502\n\u2502                                                            descriptions in   \u2502\n\u2502                                                            tables. Only      \u2502\n\u2502                                                            affects tables.   \u2502\n\u2502                                                            [default:         \u2502\n\u2502                                                            table-no-descrip\u2026 \u2502\n\u2502 --table-max-dep\u2026                          INTEGER          Maximum depth to  \u2502\n\u2502                                                            print nested      \u2502\n\u2502                                                            objects. Only     \u2502\n\u2502                                                            affects tables.   \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --table-compact       --table-no-comp\u2026                     Compact table     \u2502\n\u2502                                                            output. Only      \u2502\n\u2502                                                            affects tables.   \u2502\n\u2502                                                            [default:         \u2502\n\u2502                                                            table-no-compact] \u2502\n\u2502 --json-indent                             INTEGER          Indentation level \u2502\n\u2502                                                            for JSON output.  \u2502\n\u2502                                                            Affects JSON and  \u2502\n\u2502                                                            JSON schema.      \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --json-sort-keys      --json-no-sort-\u2026                     Sort keys in JSON \u2502\n\u2502                                                            output. Affects   \u2502\n\u2502                                                            JSON and JSON     \u2502\n\u2502                                                            schema.           \u2502\n\u2502                                                            [default:         \u2502\n\u2502                                                            json-no-sort-key\u2026 \u2502\n\u2502 --format          -f                      [table|json|jso  Output format.    \u2502\n\u2502                                           nschema]         [default: None]   \u2502\n\u2502 --output          -o                      PATH             Output file, by   \u2502\n\u2502                                                            default None,     \u2502\n\u2502                                                            which means       \u2502\n\u2502                                                            output to stdout. \u2502\n\u2502                                                            If the file       \u2502\n\u2502                                                            already exists,   \u2502\n\u2502                                                            it will be        \u2502\n\u2502                                                            overwritten.      \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --no-overwrite                                             Do not overwrite  \u2502\n\u2502                                                            the output file   \u2502\n\u2502                                                            if it already     \u2502\n\u2502                                                            exists.           \u2502\n\u2502 --verbose         -v                                       Enable verbose    \u2502\n\u2502                                                            output.           \u2502\n\u2502 --with-stdout                                              Output to stdout  \u2502\n\u2502                                                            in addition to    \u2502\n\u2502                                                            the specified     \u2502\n\u2502                                                            output file, if   \u2502\n\u2502                                                            any. Has no       \u2502\n\u2502                                                            effect if no      \u2502\n\u2502                                                            output file is    \u2502\n\u2502                                                            specified.        \u2502\n\u2502 --install-compl\u2026                          [bash|zsh|fish|  Install           \u2502\n\u2502                                           powershell|pwsh  completion for    \u2502\n\u2502                                           ]                the specified     \u2502\n\u2502                                                            shell.            \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --show-completi\u2026                          [bash|zsh|fish|  Show completion   \u2502\n\u2502                                           powershell|pwsh  for the specified \u2502\n\u2502                                           ]                shell, to copy it \u2502\n\u2502                                                            or customize the  \u2502\n\u2502                                                            installation.     \u2502\n\u2502                                                            [default: None]   \u2502\n\u2502 --help                                                     Show this message \u2502\n\u2502                                                            and exit.         \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 artifact             Manage artifacts.                                       \u2502\n\u2502 auditlog             System information                                      \u2502\n\u2502 config               Manage Harbor configuration.                            \u2502\n\u2502 cve-allowlist        Manage the system-wide CVE allowlist.                   \u2502\n\u2502 gc                   Garbage Collection scheduling and information           \u2502\n\u2502 init                 Initialize Harbor CLI configuration file.               \u2502\n\u2502 ldap                 LDAP configuration                                      \u2502\n\u2502 project              Manage projects.                                        \u2502\n\u2502 registry             Registry management                                     \u2502\n\u2502 replication          Registry replication execution and policy.              \u2502\n\u2502 repository           Manage repositories.                                    \u2502\n\u2502 sample-config        Print a sample config file to stdout.                   \u2502\n\u2502 scan                 Scanning of individual artifacts.                       \u2502\n\u2502 scan-all             Scanning of all artifacts.                              \u2502\n\u2502 scanner              Manage scanners.                                        \u2502\n\u2502 system               System information                                      \u2502\n\u2502 user                 Manage users.                                           \u2502\n\u2502 vulnerabilities      List vulnerabilities for an artifact.                   \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"usage/commands/","title":"Commands","text":""},{"location":"usage/commands/#commands","title":"Commands","text":"<p>There are currently 107 available commands.</p> <p>For more information about a specific command, use <code>harbor &lt;command&gt; --help</code>.</p> <pre><code>artifact accessories\nartifact buildhistory\nartifact copy\nartifact delete\nartifact get\nartifact label\nartifact label add\nartifact label delete\nartifact list\nartifact tag\nartifact tag create\nartifact tag delete\nartifact tag list\nartifact vulnerabilities\nauditlog list\nconfig get\nconfig update\ncve-allowlist clear\ncve-allowlist get\ncve-allowlist update\ngc job\ngc jobs\ngc log\ngc schedule\ngc schedule create\ngc schedule get\ngc schedule update\nldap ping\nldap search\nldap search groups\nldap search users\nproject create\nproject delete\nproject exists\nproject get\nproject list\nproject logs\nproject metadata\nproject metadata field\nproject metadata field delete\nproject metadata field get\nproject metadata field set\nproject metadata get\nproject metadata set\nproject scanner\nproject scanner candidates\nproject scanner get\nproject scanner set\nproject summary\nproject update\nregistry adapters\nregistry create\nregistry delete\nregistry get\nregistry list\nregistry providers\nregistry status\nregistry update\nreplication get\nreplication list\nreplication policy\nreplication policy create\nreplication policy delete\nreplication policy get\nreplication policy list\nreplication start\nreplication stop\nreplication task\nreplication task list\nreplication task log\nrepository delete\nrepository get\nrepository list\nrepository update\nscan log\nscan start\nscan stop\nscan-all metrics\nscan-all schedule\nscan-all schedule create\nscan-all schedule get\nscan-all schedule update\nscan-all stop\nscanner create\nscanner default\nscanner delete\nscanner get\nscanner list\nscanner update\nsystem health\nsystem info\nsystem ping\nsystem statistics\nsystem volumes\nuser create\nuser delete\nuser get\nuser get-current\nuser get-current-permissions\nuser list\nuser search\nuser set-admin\nuser set-cli-secret\nuser set-password\nuser unset-admin\nuser update\n</code></pre>"},{"location":"usage/formats/","title":"Formats","text":""},{"location":"usage/formats/#table-table","title":"Table: <code>table</code>","text":"<p>The default output format. Renders the result as one or more Rich tables. Example:</p> <pre><code>harbor --format table system info\n</code></pre> <pre><code>\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 GeneralInfo                                                                  \u2502\n\u2502 \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513 \u2502\n\u2502 \u2503 Field                              \u2503 Value                               \u2503 \u2502\n\u2502 \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529 \u2502\n\u2502 \u2502 current_time                       \u2502 2023-01-09 13:56:00.086000+00:00    \u2502 \u2502\n\u2502 \u2502 with_notary                        \u2502 False                               \u2502 \u2502\n\u2502 \u2502 with_chartmuseum                   \u2502 False                               \u2502 \u2502\n\u2502 \u2502 registry_url                       \u2502 harbor.example.com                  \u2502 \u2502\n\u2502 \u2502 external_url                       \u2502 https://harbor.example.com          \u2502 \u2502\n\u2502 \u2502 auth_mode                          \u2502 ldap_auth                           \u2502 \u2502\n\u2502 \u2502 project_creation_restriction       \u2502 adminonly                           \u2502 \u2502\n\u2502 \u2502 self_registration                  \u2502 False                               \u2502 \u2502\n\u2502 \u2502 has_ca_root                        \u2502 False                               \u2502 \u2502\n\u2502 \u2502 harbor_version                     \u2502 v2.5.4-a39bd2bc                     \u2502 \u2502\n\u2502 \u2502 registry_storage_provider_name     \u2502 filesystem                          \u2502 \u2502\n\u2502 \u2502 read_only                          \u2502 False                               \u2502 \u2502\n\u2502 \u2502 notification_enable                \u2502 True                                \u2502 \u2502\n\u2502 \u2502 authproxy_settings                 \u2502 None                                \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"usage/formats/#json-json","title":"JSON: <code>json</code>","text":"<p>Data from API as JSON</p> <pre><code>harbor --format json system info\n</code></pre> <pre><code>{\n\"current_time\": \"2023-01-09T13:59:41.070000+00:00\",\n\"with_notary\": false,\n\"with_chartmuseum\": false,\n\"registry_url\": \"harbor.example.com\",\n\"external_url\": \"https://harbor.example.com\",\n\"auth_mode\": \"ldap_auth\",\n\"project_creation_restriction\": \"adminonly\",\n\"self_registration\": false,\n\"has_ca_root\": false,\n\"harbor_version\": \"v2.5.4-a39bd2bc\",\n\"registry_storage_provider_name\": \"filesystem\",\n\"read_only\": false,\n\"notification_enable\": true,\n\"authproxy_settings\": null\n}\n</code></pre>"},{"location":"usage/formats/#json-with-schema-jsonschema","title":"JSON with schema: <code>jsonschema</code>","text":"<p>Data from API + metadata as JSON</p> <pre><code>harbor --format jsonschema system info\n</code></pre> <pre><code>{\n\"version\": \"1.0.0\",\n\"type\": \"GeneralInfo\",\n\"module\": \"harborapi.models.models\",\n\"data\": {\n\"current_time\": \"2023-01-09T14:01:09.938000+00:00\",\n\"with_notary\": false,\n\"with_chartmuseum\": false,\n\"registry_url\": \"harbor.example.com\",\n\"external_url\": \"https://harbor.example.com\",\n\"auth_mode\": \"ldap_auth\",\n\"project_creation_restriction\": \"adminonly\",\n\"self_registration\": false,\n\"has_ca_root\": false,\n\"harbor_version\": \"v2.5.4-a39bd2bc\",\n\"registry_storage_provider_name\": \"filesystem\",\n\"read_only\": false,\n\"notification_enable\": true,\n\"authproxy_settings\": null\n}\n}\n</code></pre> <p>The intention with this format is to be able to load the data into a Python object of the correct type. This is useful for being able to load any <code>harborapi</code>[https://github.com/pederhan/harborapi] object and display it as a table, or to use any special methods that the object may have. See harbor_cli.output.schema for more information.</p> <p>This feature is under development, and there is currently no functionality in place for utilizing this. The functionality for loading from a schema file is defined by harbor_cli.output.schema.Schema.from_file.</p>"},{"location":"usage/options/","title":"Options","text":""},{"location":"usage/options/#global-options","title":"Global options","text":"<p>Global options are options that apply to every command. They are usually overrides of configuration values, such as the Harbor URL, username, password, etc. They must be specified before the command to run, e.g.:</p> <pre><code>harbor \\\n--harbor-url https://my-harbor.com/api/v2.0 \\\n--harbor-username admin \\\n--harbor-secret my-secret \\\nproject list\n</code></pre>"},{"location":"usage/options/#-config","title":"<code>--config</code>","text":"<p>Path to a configuration file to use. If not specified, the default configuration file will be used.</p>"},{"location":"usage/options/#-harbor-url","title":"<code>--harbor-url</code>","text":"<p>URL of the Harbor instance to connect to. Overrides the Harbor URL specified in the configuration file.</p>"},{"location":"usage/options/#-harbor-username","title":"<code>--harbor-username</code>","text":"<p>Username to use when connecting to the Harbor instance. Overrides the username specified in the configuration file.</p>"},{"location":"usage/options/#-harbor-secret","title":"<code>--harbor-secret</code>","text":"<p>Secret (password) to use when connecting to the Harbor instance. Overrides the password specified in the configuration file.</p>"},{"location":"usage/options/#-harbor-credentials","title":"<code>--harbor-credentials</code>","text":"<p>Base64-encoded basic access credentials to use when connecting to the Harbor instance. Overrides the credentials specified in the configuration file.</p>"},{"location":"usage/options/#-harbor-credentials-file","title":"<code>--harbor-credentials-file</code>","text":"<p>The path to a JSON file containing Harbor authentication info to use when connecting to the Harbor instance. Overrides the credentials file specified in the configuration file.</p>"},{"location":"usage/options/#-table-description-no-table-description","title":"<code>--table-description</code>/<code>--no-table-description</code>","text":"<p>Enable/disable table description columns. Overrides the <code>output.table.description</code> configuration value.</p>"},{"location":"usage/options/#-table-max-depth","title":"<code>--table-max-depth</code>","text":"<p>Specifies depth to recurse when rendering nested data structures as tables. A value of <code>-1</code> disables recursion. Overrides the <code>output.table.max_depth</code> configuration value.</p>"},{"location":"usage/options/#-table-compact-table-no-compact","title":"<code>--table-compact</code>/<code>--table-no-compact</code>","text":"<p>Enable/disable compact table rendering. Overrides the <code>output.table.compact</code> configuration value. Compact tables are custom tables that are rendered in a more compact format, sometimes omitting columns that are not relevant to the current context.</p> <p>Disabling this option will render tables in the default format defined in harborapi, which is more verbose.</p>"},{"location":"usage/options/#-json-indent","title":"<code>--json-indent</code>","text":"<p>Specifies the number of spaces to indent when rendering JSON output. Overrides the <code>output.json.indent</code> configuration value.</p>"},{"location":"usage/options/#-json-sort-keys","title":"<code>--json-sort-keys</code>","text":"<p>Enable/disable sorting of JSON keys. Overrides the <code>output.json.sort_keys</code> configuration value.</p>"},{"location":"usage/options/#-format-f","title":"<code>--format</code>/<code>-f</code>","text":"<p>Specifies the output format to use. Overrides the <code>output.format</code> configuration value.</p> <p>The available values are <code>table</code>,  <code>json</code>,  <code>jsonschema</code></p> <p>See Formats for more information.</p>"},{"location":"usage/options/#subcommand-list-options","title":"<code>&lt;subcommand&gt; list</code> options","text":"<p>Most resources can be listed using the <code>&lt;type of resource&gt; list</code> command, e.g. <code>project list</code>, <code>repository list</code>, <code>scanner list</code>, etc.</p> <p>The following options are supported by the various <code>list</code> subcommands.</p>"},{"location":"usage/options/#-query","title":"<code>--query</code>","text":"<p>Query string used to query/filter resources. Only the resources that match the query string will be returned. If a field that is not supported by the resource is specified in the query string, the it will be ignored. This is a Harbor API implementation detail, and might change in the future.</p> <p>Supported query patterns are:</p> <ul> <li>Exact match: <code>k=v</code></li> <li>Fuzzy match: <code>k=~v</code></li> <li>Range: <code>k=[min~max]</code></li> <li>List with union releationship: <code>k={v1 v2 v3}</code></li> <li>List with intersetion relationship: <code>k=(v1 v2 v3)</code>.</li> </ul> <p>The value of range and list can be string, integer or time (in the format  <code>\"2020-04-09 02:36:00\"</code>). Query patterns can be combined by separating them with <code>\",\"</code>. e.g.</p> <pre><code>--query \"k1=v1,k2=~v2,k3=[min~max]\"\n</code></pre> <p>Values with spaces must be enclosed in quotes. e.g.</p> <pre><code>--query \"k1=v1,k2=~v2,k3=[min~max],k4='2020-04-09 02:36:00'\"\n</code></pre> <p>Always enclose the query pattern in quotes to avoid shell expansion. Use different quotes for the enclosing quotes and the quotes around the value.</p>"},{"location":"usage/options/#-sort","title":"<code>--sort</code>","text":"<p>Sorting order of the resources. The value of the option is a comma-separated list of fields to sort by. By default, fields are sorted in ascending order. Use <code>-</code> to denote that the field should be sorted in descending order.</p> <p>Sort field1 ascending and field2 descending:</p> <pre><code>--sort \"field1,-field2\"\n</code></pre> <p>Enclose the value in quotes to avoid shell expansion.</p>"},{"location":"usage/options/#-page","title":"<code>--page</code>","text":"<p>Page number of page to start fetching resources from. The default value is 1. This should ideally never be changed, but is exposed for completeness.</p>"},{"location":"usage/options/#-page-size","title":"<code>--page-size</code>","text":"<p>Number of resources to fetch per page. The default value is 10, but can be changed to any positive integer value. Again, not expected to be changed, but is exposed for completeness.</p>"},{"location":"usage/terminology/","title":"Terminology","text":"<p>Commands invocation is structured as follows:</p> <pre><code>harbor [GLOBAL OPTIONS] COMMAND [SUBCOMMAND, SUBSUBCOMMAND, ...] [ARGS] [COMMAND OPTIONS]\n</code></pre>"},{"location":"usage/terminology/#global-options","title":"<code>GLOBAL OPTIONS</code>","text":"<p>Global options are options that apply to all commands. They must be specified before the command. Examples of this are <code>--config</code>, <code>--url</code>, <code>--username</code>, etc.</p> <p>See the output of <code>harbor --help</code> for a full list of global options.</p>"},{"location":"usage/terminology/#command","title":"<code>COMMAND</code>","text":"<p>Command is a resource such as <code>project</code>, <code>repository</code>, <code>artifact</code>, etc.</p>"},{"location":"usage/terminology/#subcommand-subsubcommand-etc","title":"<code>SUBCOMMAND</code>, <code>SUBSUBCOMMAND</code>, etc.","text":"<p>Certain commands have subcommands, and these subcommands can have their own set of subcommands, etc.</p> <p>An example of this is the commmand:</p> <pre><code>project metadata field set\n</code></pre> <p>Which can be decomposed into the following:</p> <ul> <li><code>COMMAND</code>: <code>project</code></li> <li><code>SUBCOMMAND</code>: <code>metadata</code></li> <li><code>SUBSUBCOMMAND</code>: <code>field</code></li> <li><code>SUBSUBSUBCOMMAND</code>: <code>set</code></li> </ul> <p>The final subcommand is the action to perform on the resource, such as <code>create</code>, <code>delete</code>, <code>list</code>, etc.</p>"},{"location":"usage/terminology/#actions-terminology","title":"Actions terminology","text":"<ul> <li><code>get</code> - Get a resource</li> <li><code>create</code> - Create a resource</li> <li><code>delete</code> - Delete a resource<ul> <li>Prompts for confirmation unless <code>--force</code> is specified.</li> </ul> </li> <li><code>list</code> - List resources (optionally filtered by a query)</li> <li><code>update</code> - Perform a (partial) update of a resource.<ul> <li>The default behavior is similar to a PATCH request. Performs a partial update with only the given parameters (corresponding to the resource's fields) being updated on the resource.</li> <li>FLAG <code>--replace</code>:  Replace the existing resource with a new resource using the provided data. Similar to a PUT request.</li> </ul> </li> <li><code>set</code> - Set the value of a specific field on a resource.<ul> <li>Used for setting single values, such as setting default project scanner.</li> </ul> </li> <li><code>add</code> - Add a value or reference to a resource to a resource<ul> <li>Used when multiple values can be added to a resource field, such as adding labels to artifacts.</li> </ul> </li> <li><code>start</code> - Start a job (scan, replication, etc.)</li> <li><code>stop</code> - Stop a job</li> <li><code>info</code> - Get information about an immutable resource<ul> <li>Used for getting information about a resource that cannot be updated by users, such as getting information about the system status.</li> </ul> </li> </ul>"},{"location":"usage/terminology/#args","title":"<code>ARGS</code>","text":"<p>The args for a command is usually the name or ID of a resource.</p> <pre><code>harbor project get my-project\n</code></pre> <p>The command specifies <code>my-project</code> as the argument for the <code>get</code> action on the <code>project</code> resource.</p>"},{"location":"usage/terminology/#command-options","title":"<code>COMMAND OPTIONS</code>","text":"<p>Command options are options that apply to a command.</p> <p><pre><code>harbor project create my-project --public\n</code></pre> The command above has a <code>--public</code> option that can be used to create a public project.</p>"}]}